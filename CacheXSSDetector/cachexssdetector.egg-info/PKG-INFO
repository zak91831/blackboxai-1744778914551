Metadata-Version: 2.4
Name: cachexssdetector
Version: 1.0.0
Summary: A sophisticated security tool for detecting cache-based XSS vulnerabilities
Home-page: https://github.com/yourusername/CacheXSSDetector
Author: Security Research Team
Author-email: security@example.com
Platform: any
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Information Technology
Classifier: Intended Audience :: System Administrators
Classifier: Topic :: Security
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: requests>=2.27.1
Requires-Dist: beautifulsoup4>=4.10.0
Requires-Dist: lxml>=4.9.1
Requires-Dist: pyyaml>=6.0
Requires-Dist: python-dotenv>=0.20.0
Requires-Dist: flask>=2.0.1
Requires-Dist: flask-restx>=0.5.1
Requires-Dist: flask-cors>=3.0.10
Requires-Dist: gunicorn>=20.1.0
Requires-Dist: flask-security-too>=4.1.0
Requires-Dist: pyjwt>=2.3.0
Requires-Dist: bcrypt>=3.2.0
Requires-Dist: oauthlib>=3.2.0
Requires-Dist: sqlalchemy>=1.4.36
Requires-Dist: alembic>=1.7.7
Requires-Dist: pymongo>=4.1.1
Requires-Dist: reportlab>=3.6.9
Requires-Dist: matplotlib>=3.5.2
Requires-Dist: seaborn>=0.11.2
Requires-Dist: jinja2>=3.1.1
Requires-Dist: pdfkit>=1.0.0
Requires-Dist: weasyprint>=54.3
Requires-Dist: markdown2>=2.4.0
Requires-Dist: plotly>=5.6.0
Requires-Dist: scikit-learn>=1.0.2
Requires-Dist: pandas>=1.4.2
Requires-Dist: numpy>=1.22.3
Requires-Dist: requests-toolbelt>=0.9.1
Requires-Dist: aiohttp>=3.8.1
Requires-Dist: urllib3>=1.26.9
Requires-Dist: pytest>=7.1.2
Requires-Dist: pytest-cov>=3.0.0
Requires-Dist: responses>=0.20.0
Requires-Dist: pytest-mock>=3.7.0
Requires-Dist: click>=8.1.3
Requires-Dist: tqdm>=4.64.0
Requires-Dist: colorama>=0.4.4
Requires-Dist: schedule>=1.1.0
Requires-Dist: pytz>=2022.1
Requires-Dist: jira>=3.1.1
Requires-Dist: slack-sdk>=3.15.2
Requires-Dist: websocket-client>=1.3.2
Requires-Dist: pytest-github-actions-annotate-failures>=0.1.7
Requires-Dist: black>=22.3.0
Requires-Dist: isort>=5.10.1
Requires-Dist: flake8>=4.0.1
Requires-Dist: mypy>=0.942
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.1; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: pytest-mock>=3.11.1; extra == "dev"
Requires-Dist: responses>=0.23.1; extra == "dev"
Requires-Dist: aioresponses>=0.7.4; extra == "dev"
Requires-Dist: flake8>=6.1.0; extra == "dev"
Requires-Dist: black>=23.7.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: mypy>=1.4.1; extra == "dev"
Requires-Dist: pylint>=2.17.5; extra == "dev"
Requires-Dist: bandit>=1.7.5; extra == "dev"
Requires-Dist: types-requests>=2.31.0.2; extra == "dev"
Requires-Dist: types-PyYAML>=6.0.12.11; extra == "dev"
Requires-Dist: sphinx>=7.1.2; extra == "dev"
Requires-Dist: sphinx-rtd-theme>=1.2.2; extra == "dev"
Requires-Dist: sphinx-autodoc-typehints>=1.24.0; extra == "dev"
Requires-Dist: ipython>=8.14.0; extra == "dev"
Requires-Dist: ipdb>=0.13.13; extra == "dev"
Requires-Dist: watchdog>=3.0.0; extra == "dev"
Requires-Dist: safety>=2.3.5; extra == "dev"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: platform
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# CacheXSSDetector

A sophisticated security tool for detecting and analyzing cache-based Cross-Site Scripting (XSS) vulnerabilities in web applications.

## Overview

CacheXSSDetector is a specialized security testing tool designed to identify, verify, and assess cache-based XSS vulnerabilities. It focuses on detecting vulnerabilities that arise from the interaction between web caching systems and XSS payloads, including cache poisoning, cache deception, and persistent XSS through cache mechanisms.

## Features

### Core Scanning Capabilities
- **URL Path Manipulation**: Advanced path traversal and parameter manipulation for cache testing
- **Cache Behavior Analysis**: In-depth analysis of caching patterns and behaviors
- **XSS Payload Generation**: Sophisticated payload generation with cache-aware capabilities
- **Response Analysis**: Comprehensive analysis of cached responses and XSS indicators

### Request Components
- **HTTP Client**: Robust HTTP client with cache-aware request handling
- **Header Manipulation**: Advanced header manipulation for cache testing
- **Proxy Integration**: Seamless integration with HTTP/HTTPS proxies

### Verification System
- **Multi-Client Simulator**: Simulation of multiple clients for cache behavior testing
- **Cache Hit/Miss Detection**: Accurate detection of cache hits and misses
- **False Positive Reduction**: Advanced algorithms to minimize false positives

### Reporting System
- **Vulnerability Classification**: Detailed classification of discovered vulnerabilities
- **Risk Assessment**: Comprehensive risk assessment and scoring
- **Report Generation**: Detailed HTML reports with visualizations

## Installation

1. Clone the repository:
```bash
git clone https://github.com/yourusername/CacheXSSDetector.git
cd CacheXSSDetector
```

2. Create a virtual environment:
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

3. Install dependencies:
```bash
pip install -r requirements.txt
```

## Usage

### Basic Usage
```bash
python cachexssdetector.py scan --url https://example.com
```

### Advanced Options
```bash
python cachexssdetector.py scan \
    --url https://example.com \
    --config custom_config.yaml \
    --output report.html \
    --verbose
```

### Configuration
Create a custom configuration file by copying and modifying the default config:
```bash
cp config.yaml custom_config.yaml
```

## Configuration Options

### Core Scanner Settings
```yaml
core_scanner:
  url_path:
    max_path_depth: 5
    max_params: 10
  cache_behavior:
    min_samples: 5
    time_window: 300
```

### Request Components Settings
```yaml
request_components:
  http_client:
    timeout: 30
    max_retries: 3
  header_manipulation:
    enable_custom_headers: true
```

### Verification System Settings
```yaml
verification_system:
  multi_client:
    num_clients: 5
    request_delay: 1.0
```

## Architecture

### Core Components
1. **Core Scanner**
   - URL Path Manipulation
   - Cache Behavior Analysis
   - XSS Payload Generator
   - Response Analyzer

2. **Request Components**
   - HTTP Client
   - Header Manipulation
   - Proxy Integration

3. **Verification System**
   - Multi-Client Simulator
   - Cache Hit/Miss Detector
   - False Positive Reducer

4. **Reporting Module**
   - Vulnerability Classification
   - Risk Assessment
   - Report Generator

## Development

### Setting Up Development Environment
```bash
# Install development dependencies
pip install -r requirements-dev.txt

# Run tests
pytest tests/

# Run linting
flake8 cachexssdetector/
```

### Contributing
1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Run tests and linting
5. Submit a pull request

## Security Considerations

### Responsible Testing
- Always obtain proper authorization before testing
- Follow responsible disclosure practices
- Be aware of potential impact on cache systems

### Limitations
- Tool may impact cache performance
- Some detection methods are timing-dependent
- False positives may occur in complex scenarios

## Best Practices

### Cache Testing
1. Start with non-critical systems
2. Monitor cache performance during testing
3. Clear caches after testing
4. Document all findings and impacts

### Mitigation Strategies
1. Implement proper cache controls
2. Use cache segmentation
3. Apply security headers
4. Regular cache validation

## Troubleshooting

### Common Issues
1. **Connection Errors**
   - Check proxy settings
   - Verify target accessibility
   - Review network configurations

2. **False Positives**
   - Adjust confidence thresholds
   - Increase verification rounds
   - Review cache patterns

3. **Performance Issues**
   - Adjust request delays
   - Reduce parallel requests
   - Monitor system resources

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- Thanks to all contributors
- Special thanks to the security research community
- Inspired by various web security tools and research

## Contact

- Report bugs: [Issue Tracker](https://github.com/yourusername/CacheXSSDetector/issues)
- Follow updates: [Twitter](https://twitter.com/yourusername)
- Questions: [Discussions](https://github.com/yourusername/CacheXSSDetector/discussions)
